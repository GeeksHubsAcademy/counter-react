{"version":3,"sources":["Counter.jsx","App.jsx","index.js"],"names":["Counter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","increment","amountToIncrement","Number","amount","max","state","count","setState","from","react_default","a","createElement","onClick","className","style","fontSize","JSON","stringify","React","Component","App","src_Counter","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"8OA+BeA,qBA3Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIRQ,UAAY,WACV,IAAIC,EAAoBC,OAAOT,EAAKD,MAAMW,SAAW,GAEhDV,EAAKD,MAAMY,KAAOX,EAAKD,MAAMY,KAAOX,EAAKY,MAAMC,MAAQL,EAC1DR,EAAKc,SAAS,CAAED,MAAOb,EAAKY,MAAMC,MAAQL,IAE1CR,EAAKc,SAAS,CAAED,MAAOJ,OAAOT,EAAKD,MAAMgB,OAAS,KATpDf,EAAKY,MAAQ,CAAEC,MAAOJ,OAAOV,EAAMgB,OAAS,GAF3Bf,wEAgBjB,OACEgB,EAAAC,EAAAC,cAAA,OAAKC,QAAShB,KAAKI,UAAWa,UAAU,WACtCJ,EAAAC,EAAAC,cAAA,MAAIE,UAAWjB,KAAKS,MAAMC,MAAQ,IAAM,EAAI,OAAS,OAAQV,KAAKS,MAAMC,OACxEG,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAAEC,SAAUnB,KAAKS,MAAMC,MAAQ,OAASU,KAAKC,UAAUrB,KAAKJ,iBArB5D0B,IAAMC,YCebC,0LAXX,OACEX,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAACU,EAAD,CAASlB,OAAQ,IACjBM,EAAAC,EAAAC,cAACU,EAAD,CAASb,KAAM,KACfC,EAAAC,EAAAC,cAACU,EAAD,CAASb,KAAK,OAAOJ,IAAI,IAAID,OAAO,MACpCM,EAAAC,EAAAC,cAACU,EAAD,CAASb,KAAK,KAAKL,OAAO,eAPhBgB,cCClBG,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.a7797088.chunk.js","sourcesContent":["import React from 'react';\nimport './counter.css';\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: Number(props.from) || 0 };\n  }\n\n  increment = () => {\n    let amountToIncrement = Number(this.props.amount) || 1;\n\n    if (!this.props.max || this.props.max >= this.state.count + amountToIncrement) {\n      this.setState({ count: this.state.count + amountToIncrement });\n    } else {\n      this.setState({ count: Number(this.props.from) || 0 });\n    }\n  };\n\n  render() {\n    return (\n      <div onClick={this.increment} className='counter'>\n        <h3 className={this.state.count % 2 === 0 ? 'even' : 'odd'}>{this.state.count}</h3>\n        <small>\n          <pre style={{ fontSize: this.state.count + 'px' }}>{JSON.stringify(this.props)}</pre>\n        </small>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n","import React, { Component } from 'react';\nimport Counter from './Counter.jsx';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App-header'>\n        <Counter amount={3} />\n        <Counter from={12} />\n        <Counter from='hola' max='6' amount='3' />\n        <Counter from='33' amount='-4' />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}